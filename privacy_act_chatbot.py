# Databricks notebook source
# MAGIC %pip install transformers==4.30.2 "unstructured[pdf,docx]==0.10.30" llama-index==0.9.40 databricks-vectorsearch==0.20 pydantic==1.10.9 mlflow==2.9.0 protobuf==3.20.0 openai==1.10.0 langchain-openai langchain
# MAGIC dbutils.library.restartPython()

# COMMAND ----------

# MAGIC %run ./_resources/00-init-advanced $reset_all_data=false

# COMMAND ----------

install_ocr_on_nodes()

# COMMAND ----------

# MAGIC %md
# MAGIC catalog = "demo"
# MAGIC db = "hackathon"
# MAGIC volume_folder = f"/Volumes/{catalog}/{db}/privacy_act_docs/*/"
# MAGIC df = (spark.readStream
# MAGIC         .format('cloudFiles')
# MAGIC         .option('cloudFiles.format', 'BINARYFILE')
# MAGIC         .option("pathGlobFilter", "*.pdf")
# MAGIC         .load('dbfs:'+volume_folder))
# MAGIC
# MAGIC # Write the data as a Delta table
# MAGIC (df.writeStream
# MAGIC   .trigger(availableNow=True)
# MAGIC   .option("checkpointLocation", f'dbfs:{volume_folder}/checkpoints/raw_docs')
# MAGIC   .table(f'{catalog}.{db}.pdf_raw').awaitTermination())

# COMMAND ----------

from unstructured.partition.auto import partition
import re
import io

def extract_doc_text(x : bytes) -> str:
  # Read files and extract the values with unstructured
  sections = partition(file=io.BytesIO(x))
  print(sections)
  def clean_section(txt):
    txt = re.sub(r'\n', '', txt)
    return re.sub(r' ?\.', '.', txt)
  # Default split is by section of document, concatenate them all together because we want to split by sentence instead.
  return "\n".join([clean_section(s.text) for s in sections]) 

# COMMAND ----------

# MAGIC %md
# MAGIC import io
# MAGIC import re
# MAGIC
# MAGIC with open("/Volumes/demo/hackathon/privacy_act_docs/Colorado/CPA-regulations.pdf", "rb") as fh:
# MAGIC     bytes_stream = bytes(fh.read())
# MAGIC doc = extract_doc_text(bytes_stream)
# MAGIC print(doc)

# COMMAND ----------

from llama_index.langchain_helpers.text_splitter import SentenceSplitter
from llama_index.node_parser import SemanticSplitterNodeParser
from llama_index import Document, set_global_tokenizer
from transformers import AutoTokenizer
from pyspark.sql.functions import pandas_udf
from typing import Iterator
import pandas as pd
import os
import logging
from pyspark.sql import functions as F
import mypy_extensions
from openai import AzureOpenAI
from langchain_openai import AzureOpenAIEmbeddings

os.environ["AZURE_OPENAI_API_KEY"] = dbutils.secrets.get(scope='dev_demo', key='azure_openai_api_key')
os.environ["AZURE_OPENAI_ENDPOINT"] = "https://nous-ue2-openai-sbx-openai.openai.azure.com/"

embeddings = AzureOpenAIEmbeddings(
    azure_deployment="nous-ue2-openai-sbx-base-deploy-text-embedding-ada-002",
    openai_api_version="2023-05-15",
)

client = AzureOpenAI(
    api_key = dbutils.secrets.get(scope='dev_demo', key='azure_openai_api_key'),
    api_version = "2023-05-15",
    azure_endpoint = "https://nous-ue2-openai-sbx-openai.openai.azure.com/",
    )

# Reduce the arrow batch size as our PDF can be big in memory
spark.conf.set("spark.sql.execution.arrow.maxRecordsPerBatch", 10)

os.environ["HF_HOME"] = '/tmp'

@pandas_udf("array<string>")
def read_as_chunk(batch_iter: Iterator[pd.Series]) -> Iterator[pd.Series]:
    #set embedding model
    # embed_model = "nous-ue2-openai-sbx-base-deploy-text-embedding-ada-002"
    #set llama2 as tokenizer to match our model size (will stay below BGE 1024 limit)
    set_global_tokenizer(
      AutoTokenizer.from_pretrained("hf-internal-testing/llama-tokenizer", cache_dir = '/tmp')
    )
    # splitter = SemanticSplitterNodeParser(
    # buffer_size=1, breakpoint_percentile_threshold=95, embed_model=embeddings
    # )
    #Sentence splitter from llama_index to split on sentences
    base_splitter = SentenceSplitter(chunk_size=500, chunk_overlap=25)
    def extract_and_split(b):
      txt = extract_doc_text(b)
      nodes = base_splitter.get_nodes_from_documents([Document(text=txt)])
      logging.info(f"from chunk function: {txt}")
      
      return [n.text for n in nodes]

    for x in batch_iter:
        yield x.apply(extract_and_split)

# COMMAND ----------

# MAGIC %md
# MAGIC from mlflow.deployments import get_deploy_client
# MAGIC from pprint import pprint
# MAGIC
# MAGIC # bge-large-en Foundation models are available using the /serving-endpoints/databricks-bge-large-en/invocations api. 
# MAGIC deploy_client = get_deploy_client("databricks")
# MAGIC
# MAGIC embeddings = deploy_client.predict(endpoint="databricks-bge-large-en", inputs={"input": ["What is Apache Spark?"]})
# MAGIC pprint(embeddings)

# COMMAND ----------

# MAGIC %sql
# MAGIC --Note that we need to enable Change Data Feed on the table to create the index
# MAGIC CREATE TABLE IF NOT EXISTS demo.hackathon.databricks_pdf_documentation_openai (
# MAGIC   id BIGINT GENERATED BY DEFAULT AS IDENTITY,
# MAGIC   url STRING,
# MAGIC   content STRING,
# MAGIC   embedding ARRAY <FLOAT>
# MAGIC ) TBLPROPERTIES (delta.enableChangeDataFeed = true); 

# COMMAND ----------

# MAGIC %md
# MAGIC @pandas_udf("array<float>")
# MAGIC def get_embedding(contents: pd.Series) -> pd.Series:
# MAGIC     import mlflow.deployments
# MAGIC     deploy_client = mlflow.deployments.get_deploy_client("databricks")
# MAGIC     def get_embeddings(batch):
# MAGIC         #Note: this will fail if an exception is thrown during embedding creation (add try/except if needed) 
# MAGIC         response = deploy_client.predict(endpoint="databricks-bge-large-en", inputs={"input": batch})
# MAGIC         return [e['embedding'] for e in response.data]
# MAGIC
# MAGIC     # Splitting the contents into batches of 150 items each, since the embedding model takes at most 150 inputs per request.
# MAGIC     max_batch_size = 150
# MAGIC     batches = [contents.iloc[i:i + max_batch_size] for i in range(0, len(contents), max_batch_size)]
# MAGIC
# MAGIC     # Process each batch and collect the results
# MAGIC     all_embeddings = []
# MAGIC     for batch in batches:
# MAGIC         all_embeddings += get_embeddings(batch.tolist())
# MAGIC
# MAGIC     return pd.Series(all_embeddings)

# COMMAND ----------

def open_ai_embeddings(contents):
    embed_model = "nous-ue2-openai-sbx-base-deploy-text-embedding-ada-002"

    response = client.embeddings.create(
        input = contents,
        model = embed_model
    )

    return response.data[0].embedding

# COMMAND ----------

# MAGIC %md
# MAGIC temp = spark.table('demo.hackathon.raw_pdf') \
# MAGIC       .withColumn("embedding", open_ai_embeddings("content")) \
# MAGIC       .selectExpr('url', 'content', 'embedding')
# MAGIC
# MAGIC temp.write \
# MAGIC     .option("checkpointLocation", f'dbfs:{volume_folder}/checkpoints/pdf_chunk_openai') \
# MAGIC     .mode("overwrite") \
# MAGIC     .saveAsTable('demo.hackathon.databricks_pdf_documentation_openai')

# COMMAND ----------

from pyspark.sql import functions as F
import mypy_extensions
import pandas as pd
import os

# # Reduce the arrow batch size as our PDF can be big in memory
# spark.conf.set("spark.sql.execution.arrow.maxRecordsPerBatch", 10)

# os.environ["HF_HOME"] = '/tmp'

volume_folder = f"/Volumes/demo/hackathon/privacy_act_docs/*"

temp = (spark.table('demo.hackathon.pdf_raw')
        .withColumn("content", F.explode(read_as_chunk("content")))
        .withColumn("embedding", F.lit(open_ai_embeddings("content")))
        .withColumn("id", F.monotonically_increasing_id())
        .selectExpr('id', 'path as url', 'content', 'embedding')
        )

(temp.write
    .option("checkpointLocation", f'dbfs:{volume_folder}/checkpoints/pdf_chunk_openai')
    .option("overwriteSchema", "true")
    .mode("overwrite")
    .saveAsTable('demo.hackathon.databricks_pdf_documentation_openai'))

# COMMAND ----------

from pyspark.sql import functions as F
import mypy_extensions
from llama_index.langchain_helpers.text_splitter import SentenceSplitter
from llama_index import Document, set_global_tokenizer
from transformers import AutoTokenizer
from pyspark.sql.functions import pandas_udf
from typing import Iterator
import pandas as pd
import os

# # Reduce the arrow batch size as our PDF can be big in memory
# spark.conf.set("spark.sql.execution.arrow.maxRecordsPerBatch", 10)

# os.environ["HF_HOME"] = '/tmp'

# set_global_tokenizer(
#   AutoTokenizer.from_pretrained("hf-internal-testing/llama-tokenizer", cache_dir = '/tmp')
# )
# #Sentence splitter from llama_index to split on sentences
# splitter = SentenceSplitter(chunk_size=500, chunk_overlap=50)
# def extract_and_split(b):
#   txt = extract_doc_text(b)
#   nodes = splitter.get_nodes_from_documents([Document(text=txt)])
#   return [n.text for n in nodes]

# col = spark.table('demo.hackathon.pdf_raw')
# pd_col = col.toPandas()

# pd_col["content"].apply(extract_and_split)

volume_folder = f"/Volumes/demo/hackathon/privacy_act_docs/*"

temp = spark.table('demo.hackathon.pdf_raw') \
      .withColumn("content", F.explode(read_as_chunk("content"))) \
      .withColumn("embedding", get_embedding("content")) \
      .selectExpr('path as url', 'content', 'embedding')

temp.write \
    .option("checkpointLocation", f'dbfs:{volume_folder}/checkpoints/pdf_chunk') \
    .mode("overwrite") \
    .saveAsTable('demo.hackathon.databricks_pdf_documentation')

# (spark.readStream.table('demo.hackathon.pdf_raw')
#       .withColumn("content", F.explode(read_as_chunk("content")))
#       .withColumn("embedding", get_embedding("content"))
#       .selectExpr('path as url', 'content', 'embedding')
#   .writeStream
#     .trigger(availableNow=True)
#     .option("checkpointLocation", f'dbfs:/Volumes/demo/hackathon/privacy_act_docs/Colorado/checkpoints/pdf_chunk')
#     .table('demo.hackathon.databricks_pdf_documentation').awaitTermination())

# #Let's also add our documentation web page from the simple demo (make sure you run the quickstart demo first)
# if table_exists('demo.hackathon.databricks_documentation'):
#   (spark.readStream.table('databricks_documentation')
#       .withColumn('embedding', get_embedding("content"))
#       .select('url', 'content', 'embedding')
#   .writeStream
#     .trigger(availableNow=True)
#     .option("checkpointLocation", f'dbfs:{volume_folder}/checkpoints/docs_chunks')
#     .table('databricks_pdf_documentation').awaitTermination())

# COMMAND ----------

from databricks.vector_search.client import VectorSearchClient
vsc = VectorSearchClient()

VECTOR_SEARCH_ENDPOINT_NAME = "openai_vector_search"

if VECTOR_SEARCH_ENDPOINT_NAME not in [e['name'] for e in vsc.list_endpoints()['endpoints']]:
    vsc.create_endpoint(name=VECTOR_SEARCH_ENDPOINT_NAME, endpoint_type="STANDARD")

wait_for_vs_endpoint_to_be_ready(vsc, "VECTOR_SEARCH_ENDPOINT_NAME")
print(f"Endpoint named {VECTOR_SEARCH_ENDPOINT_NAME} is ready.")

# COMMAND ----------

from databricks.sdk import WorkspaceClient
import databricks.sdk.service.catalog as c

#The table we'd like to index
source_table_fullname = f"{catalog}.{db}.databricks_pdf_documentation"
# Where we want to store our index
vs_index_fullname = f"{catalog}.{db}.databricks_pdf_documentation_self_managed_vs_index"

if not index_exists(vsc, "privacy_vector_search", vs_index_fullname):
  print(f"Creating index {vs_index_fullname} on endpoint privacy_vector_search...")
  vsc.create_delta_sync_index(
    endpoint_name="privacy_vector_search",
    index_name=vs_index_fullname,
    source_table_name=source_table_fullname,
    pipeline_type="TRIGGERED", #Sync needs to be manually triggered
    primary_key="id",
    embedding_dimension=1024, #Match your model embedding size (bge)
    embedding_vector_column="embedding"
  )
else:
  #Trigger a sync to update our vs content with the new data saved in the table
  vsc.get_index("privacy_vector_search", vs_index_fullname).sync()

#Let's wait for the index to be ready and all our embeddings to be created and indexed
wait_for_index_to_be_ready(vsc, VECTOR_SEARCH_ENDPOINT_NAME, vs_index_fullname)

# COMMAND ----------

question = "When did the colorado privacy act go into effect?"

response = deploy_client.predict(endpoint="databricks-bge-large-en", inputs={"input": [question]})
embeddings = [e['embedding'] for e in response.data]

results = vsc.get_index("vector_search_privacy", vs_index_fullname).similarity_search(
  query_vector=embeddings[0],
  columns=["url", "content"],
  num_results=1)
docs = results.get('result', {}).get('data_array', [])
pprint(docs)
